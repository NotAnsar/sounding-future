generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  f_name    String?
  l_name    String?
  image       String?
  email     String   @unique
  password  String?
  emailVerified DateTime?
  name  String   @unique
  role      String   @default("user") 
  artistId   String?   @unique @map("artist_id")   
  preferredVariant String? 


  accounts      Account[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime? @map("last_login_at")  


  // Relations  
  artist     Artist?   @relation("UserArtist", fields: [artistId], references: [id], onDelete: SetNull) 
  follows   Follow[]
  likes     Like[]
  courseLikes CourseLike[]
  listeningHistory ListeningHistory[]
  chapterProgress ChapterProgress[]
  courseProgress  CourseProgress[]

  @@map("user")
}

model Artist {
  id                        String   @id @default(cuid())
  slug                      String   @unique
  name                      String
  f_name                    String?
  l_name                    String?
  pic                       String?
  bio                       String?  @db.Text
  socialId                  String?  @map("social_id") 
  createdAt                 DateTime @default(now()) @map("created_at")
  published                 Boolean  @default(false)

  // Relations
  user       User?    @relation("UserArtist")
  tracks       Track[]
  followers    Follow[]
  genres ArtistGenre[] @relation("ArtistToGenre")
  socialLinks   SocialLinks?   @relation(fields: [socialId], references: [id], onDelete: SetNull)
  articles        ArtistArticle[] @relation("ArtistToArticle")
  trackArtists TrackArtist[] 
  instructor  Instructor?    



  @@index([name])
  @@map("artist")
}

model Track {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  cover        String
  info         String?  @db.Text
  variant1     String?  // binaural
  variant1Name String?  
  variant2     String?  // binaural plus
  variant2Name String?  
  variant3     String?  // stereo
  variant3Name String?  
  releaseYear  Int?     @map("release_year") 
  credits      String?
  releasedBy   String   @default("self-published")
  trackRegistration   String?   
  published    Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  duration     Int?      
  articleLink  String?      
  isrcCode  String?      

  // Foreign keys
  curatedBy    String?          @map("curated_by") 
  artistId     String?           @map("artist_id") 
  formatId     String?          @map("format_id") 
  
  // Relations
  artist Artist? @relation(fields: [artistId], references: [id])  // Make optional
  curator      Partner?         @relation("PartnerCurated", fields: [curatedBy], references: [id])
  sourceFormat SourceFormat?    @relation(fields: [formatId], references: [id])
  genres TrackGenre[] 
  likes  Like[]
  listeners    ListeningHistory[]
  artists TrackArtist[] // Add this line
    



  
  @@index([title])
  @@map("tracks")
}

model Partner {
  id          String       @id @default(cuid()) 
  slug        String       @unique
  name        String
  picture     String
  country     String
  studioPic   String?      @map("studio_pic")
  bio         String?
  socialId    String?      @map("social_id") 
  displayOrder    Int      @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  inProgress   Boolean?      @default(false)
  
  // Relations
  socialLinks SocialLinks? @relation(fields: [socialId], references: [id], onDelete: Cascade) // Cascade delete
  tracks      Track[]      @relation("PartnerCurated")
  articles      PartnerArticle[] // New relation


  @@map("partner")
}


model Genre {
  id        String        @id @default(cuid()) 
  slug      String        @unique 
  name      String

  createdAt DateTime      @default(now()) @map("created_at") 
  displayOrder    Int      @default(autoincrement())

  // Relations
  artists   ArtistGenre[]
  tracks    TrackGenre[]

  @@map("genres")
}

model ArtistGenre {
  artistId String @map("artist_id")
  genreId  String @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  artist Artist @relation("ArtistToGenre", fields: [artistId], references: [id], onDelete: Cascade)
  genre  Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([artistId, genreId])
  @@map("artist_genres")
}

model TrackGenre {
  trackId   String   @map("track_id") 
  genreId   String   @map("genre_id") 
  createdAt DateTime @default(now()) @map("created_at")
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade) // Cascade delete
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
    


  @@id([trackId, genreId])
  @@map("track_genres")
}


model Follow {
  followingUserId  String   @map("following_user_id")
  followedArtistId String   @map("followed_artist_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [followingUserId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [followedArtistId], references: [id], onDelete: Cascade)

  @@id([followingUserId, followedArtistId])
  @@map("follows")
}

model Like {
  userId    String   @map("user_id")
  trackId   String   @map("track_id")
  createdAt DateTime @default(now()) @map("created_at")
  

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([userId, trackId])
  @@map("likes")
}

model SourceFormat {
  id        String    @id @default(cuid()) 
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  displayOrder    Int      @default(autoincrement())
  tracks    Track[]

  @@map("source_format")
}

model SocialLinks {
  id        String    @id @default(cuid()) 
  facebook  String?
  instagram String?
  linkedin  String?
  vimeo     String?
  website   String?
  youtube   String?
  mastodon  String?
  createdAt DateTime  @default(now()) @map("created_at")
  
  // Relations
  artists   Artist[]
  partners  Partner[] 

  @@map("social_links")
}

model ArticleLink {
  id         String           @id @default(cuid()) 
  url        String
  title      String?
  createdAt  DateTime         @default(now()) @map("created_at")

  // Relations
  artists    ArtistArticle[]
  partners   PartnerArticle[]

  @@map("article_links")
}

model ArtistArticle {
  artistId     String      @map("artist_id")
  articleId    String      @map("article_id") 
  createdAt    DateTime    @default(now()) @map("created_at")

  // Relations
  // artist       Artist      @relation(fields: [artistId], references: [id])
  artist       Artist      @relation("ArtistToArticle", fields: [artistId], references: [id], onDelete: Cascade)
  article      ArticleLink @relation(fields: [articleId], references: [id])

  @@id([artistId, articleId])
  @@map("artist_articles")
}

model PartnerArticle {
  partnerId    String      @map("partner_id") 
  articleId    String      @map("article_id") 
  createdAt    DateTime    @default(now()) @map("created_at")

  // Relations
  partner      Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  article      ArticleLink @relation(fields: [articleId], references: [id])

  @@id([partnerId, articleId])
  @@map("partner_articles")
}


model ListeningHistory {
  id         String   @id @default(cuid()) 
  userId     String   @map("user_id") 
  trackId    String   @map("track_id") 
  listenedAt DateTime @default(now()) @map("listened_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("listening_history")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model Banner {
    id              String   @id @default(cuid())
    title           String
    description     String   @db.Text
    backgroundColor String
    backgroundImage String?
    buttonText      String
    link            String
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt
    published       Boolean  @default(false)
    displayOrder    Int      @default(autoincrement())

    @@map("banners")
}


model ContentSection {
    id        String   @id @default(cuid())
    title     String
    header    String?  @db.Text
    content   String?   @db.Text
    items     String[] 
    buttonLabel String? 
    buttonLink  String? 
    footer    String?  @db.Text
    published Boolean  @default(false)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt

    @@map("content_sections")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  link      String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayOrder    Int      @default(autoincrement())
}

model NewsLetter {
  id        String   @id @default(cuid())
  title     String?
  content   String   @db.Text
  link      String  
  label     String
  footer    String?   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermsPage {
  id            String         @id @default(cuid())
  title         String        
  introduction  String?        @db.Text
  footer        String?        @db.Text
  published     Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt
  sections      TermsSection[]

  @@map("terms_pages")
}

model TermsSection {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  items         String[] 
  footer        String?        @db.Text
  order         Int       @default(autoincrement())
  termsPageId   String    @map("terms_page_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt

  // Relations
  termsPage     TermsPage @relation(fields: [termsPageId], references: [id], onDelete: Cascade)

  @@index([termsPageId])
  @@map("terms_sections")
}

model SubscriptionCard {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  priceInfo   String   
  reasonsTitle String  
  reasons     String[] 
  footer    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AboutHeader {
  id          String   @id @default(cuid())
  websiteUrl  String
  websiteName String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model AboutCards {
  id          String   @id @default(cuid())
  heading     String
  card1       String   @db.Text  
  card2       String   @db.Text  
  card3       String   @db.Text  
  card4       String   @db.Text  
  card5       String   @db.Text  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HelpCenterVideo {
  id          String   @id @default(cuid())
  title       String
  description String?   @db.Text
  videoUrl    String
  thumbnailUrl String?
  displayOrder Int     @default(autoincrement())
  published   Boolean  @default(false)
  isNewUserVideo     Boolean  @default(false)  

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt

  @@map("help_center_videos")
}


model PricingPage {
  id          String   @id @default(cuid())
  title     String?
  heading     String?
  subheading  String?   @db.Text
  footer  String?   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  plans       PricingPlan[]
}

model PricingPlan {
  id              String   @id @default(cuid())
  name            String
  description     String
  priceAmount     Float?
  priceCurrency   String?
  pricePeriod     String?
  displayOrder    Int      @default(autoincrement())
  published                 Boolean  @default(false)
  pageId          String
  buttonText      String?  // Optional button text
  buttonLink      String?  // Optional button link
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  page            PricingPage @relation(fields: [pageId], references: [id])
  sections        PricingPlanSection[]
  
  @@index([pageId])
}

model PricingPlanSection {
  id          String   @id @default(cuid())
  title       String
  planId      String
  order       Int      @default(autoincrement())
  features    String[] // Store features as a simple string array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  plan        PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@index([planId])
}


model TrackArtist {
  trackId   String   @map("track_id")
  artistId  String   @map("artist_id")
  isPrimary Boolean  @default(false) @map("is_primary")
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  track  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@id([trackId, artistId])
  @@map("track_artists")
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  bio       String?  @db.Text
  image     String?
  artistId  String?  @unique @map("artist_id")

  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  // Relations
  artist    Artist?  @relation(fields: [artistId], references: [id])
  courses   CourseToInstructor[]      // Many-to-many with courses
  chapters  ChapterToInstructor[]     // Chapters taught by this instructor


  @@map("instructors")
}

model CourseTopic {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String   // e.g., "3D Audio basics", "Recording"
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
  
  // Relations
  courses     CourseToTopic[]  // Courses related to this topic
  
  @@map("course_topics")
}



model CourseSeries {
  id          String   @id @default(cuid())
  name        String   // e.g., "Rethinking music"
  slug        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
  
  // // Relations
  courses     Course[]  // Courses in this series
  
  @@map("course_series")
}


// Add this to your schema.prisma file

model Course {
  id          String      @id @default(cuid())
  slug        String     @unique
  title       String
  description String?     @db.Text
  thumbnail   String     // URL to course image
  learnings   String[]    // Array of key learning points
  skills      String?     @db.Text
  credits     String?     @db.Text
  accessType  String      @default("PRO") @map("access_type") // PRO, FREE, etc.
  level       String      @default("BEGINNER") @map("course_level") // BEGINNER, INTERMEDIATE, ADVANCED
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt
  
  // Foreign keys
  
  seriesId     String?    @map("series_id")
  
  // Relations
  series       CourseSeries? @relation(fields: [seriesId], references: [id])
  chapters     Chapter[]   
  topics       CourseToTopic[]
  instructors  CourseToInstructor[]  // Many-to-many with instructors
  likes       CourseLike[]
  courseProgress  CourseProgress[]
  
  @@map("courses")
}

model Chapter {
  id          String      @id @default(cuid())
  slug        String     @unique
  title       String
  description String?     @db.Text
  videoUrl    String?     @map("video_url")
  videoDuration Int?     @map("video_duration") // Duration in seconds
  downloads   String[]    // Array of download URLs
  thumbnail   String?     // URL to thumbnail
  accessType  String      @default("PRO") @map("access_type") // PRO, FREE, etc.
  position    Int         @default(autoincrement())  // For ordering chapters
  
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt
  
  // Foreign keys
  courseId    String      @map("course_id")
  
  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructors ChapterToInstructor[]
  progress        ChapterProgress[]
  currentProgress CourseProgress[]
  
  @@map("chapters")
}

// Junction table for Course to Topic (many-to-many)
model CourseToTopic {
  courseId  String      @map("course_id")
  topicId   String      @map("topic_id")
  
  // Relations
  course    Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topic     CourseTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@id([courseId, topicId])
  @@map("course_topics_junction")
}

// Junction table for Chapter to Instructor (many-to-many)
model ChapterToInstructor {
  chapterId    String     @map("chapter_id")
  instructorId String     @map("instructor_id")
  
  // Relations
  chapter      Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  @@id([chapterId, instructorId])
  @@map("chapter_instructors")
}


model CourseToInstructor {
  courseId     String     @map("course_id")
  instructorId String     @map("instructor_id")
  isPrimary    Boolean    @default(false) @map("is_primary") // To mark main instructor
  
  // Relations
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  @@id([courseId, instructorId])
  @@map("course_instructors")
}

model CourseLike {
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@map("course_likes")
}

model ChapterProgress {
  userId       String   @map("user_id")
  chapterId    String   @map("chapter_id")
  completed    Boolean  @default(false)
  lastPosition Int      @default(0) @map("last_position") // Last playback position in seconds
  updatedAt    DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@id([userId, chapterId])
  @@map("chapter_progress")

}



model CourseProgress {
  userId           String    @map("user_id")
  courseId         String    @map("course_id")
  currentChapterId String?   @map("current_chapter_id")
  startedAt        DateTime  @default(now()) @map("started_at")
  lastAccessedAt   DateTime  @default(now()) @map("last_accessed_at")
  completedAt      DateTime? @map("completed_at")
  updatedAt        DateTime  @updatedAt

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  currentChapter Chapter? @relation(fields: [currentChapterId], references: [id])

  @@id([userId, courseId])
  @@map("course_progress")
}
